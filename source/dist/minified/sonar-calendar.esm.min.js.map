{"version":3,"file":"sonar-calendar.esm.min.js","sources":["../../src/components/EventCard/EventCard.js","../../src/components/EventDetails/EventDetails.js","../../src/components/ViewToggle/ViewToggle.js","../../src/components/DatePicker/DatePicker.js","../../src/components/Calendar/Calendar.js","../../src/index.js"],"sourcesContent":["/**\n * EventCard Component\n * \n * Displays a single event in the calendar\n */\n\nexport class EventCard {\n  /**\n   * Create a new EventCard instance\n   * @param {Object} event - The event data\n   * @param {string} [theme='light'] - The theme to use ('light' or 'dark')\n   * @param {Function} [onClick] - Callback function when the card is clicked\n   */\n  constructor(event, theme = 'light', onClick) {\n    this.event = event;\n    this.theme = theme;\n    this.onClick = onClick;\n    this.element = this.createElement();\n  }\n\n  /**\n   * Create the event card element\n   * @returns {HTMLElement} The created element\n   * @private\n   */\n  createElement() {\n    const { id, title, start, end, description, category } = this.event;\n    const startTime = this.formatTime(start);\n    const endTime = this.formatTime(end);\n    const categoryClass = category ? `event-category-${category.toLowerCase().replace(/\\s+/g, '-')}` : '';\n\n    const card = document.createElement('div');\n    card.className = `event-card ${categoryClass} theme-${this.theme}`;\n    card.dataset.eventId = id;\n    \n    // Add ARIA attributes for accessibility\n    card.setAttribute('role', 'button');\n    card.setAttribute('tabindex', '0');\n    card.setAttribute('aria-label', `View details for ${title}`);\n    card.tabIndex = 0;\n    card.setAttribute('role', 'button');\n    card.setAttribute('aria-label', `View details for ${title}`);\n    \n    card.innerHTML = `\n      <div class=\"event-card__header\">\n        <h3 class=\"event-card__title\">${title}</h3>\n        ${category ? `<span class=\"event-card__category\">${category}</span>` : ''}\n      </div>\n      <div class=\"event-card__time\">\n        <time datetime=\"${start}\">${startTime}</time> - <time datetime=\"${end}\">${endTime}</time>\n      </div>\n      ${description ? `<p class=\"event-card__description\">${description}</p>` : ''}\n      <div class=\"event-card__more\">View details</div>\n    `;\n    \n    // Add click and keyboard event listeners\n    if (this.onClick) {\n      const handleClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.onClick(this.event);\n      };\n      \n      card.addEventListener('click', handleClick);\n      card.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          handleClick(e);\n        }\n      });\n    }\n\n    return card;\n  }\n\n  /**\n   * Format a date string to a time string\n   * @param {string} dateString - The date string to format\n   * @returns {string} The formatted time string\n   * @private\n   */\n  formatTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Render the event card\n   * @param {HTMLElement} container - The container to render the card into\n   */\n  render(container) {\n    container.appendChild(this.element);\n  }\n\n  /**\n   * Update the event data\n   * @param {Object} newEvent - The new event data\n   */\n  update(newEvent) {\n    this.event = { ...this.event, ...newEvent };\n    const newElement = this.createElement();\n    this.element.parentNode.replaceChild(newElement, this.element);\n    this.element = newElement;\n  }\n}\n","/**\n * EventDetails Component\n * \n * Displays detailed information about a calendar event\n */\n\nexport class EventDetails {\n  /**\n   * Create a new EventDetails instance\n   * @param {Object} event - The event data\n   * @param {Function} onClose - Callback when the details view is closed\n   * @param {string} [theme='light'] - The theme to use ('light' or 'dark')\n   */\n  constructor(event, onClose, theme = 'light') {\n    this.event = event;\n    this.onClose = onClose;\n    this.theme = theme;\n    this.element = this.createElement();\n  }\n\n  /**\n   * Create the event details element\n   * @returns {HTMLElement} The created element\n   * @private\n   */\n  createElement() {\n    const { id, title, start, end, description, category, location } = this.event;\n    const startDate = this.formatDate(start);\n    const startTime = this.formatTime(start);\n    const endTime = this.formatTime(end);\n    const duration = this.calculateDuration(start, end);\n\n    const details = document.createElement('div');\n    details.className = `event-details theme-${this.theme}`;\n    details.dataset.eventId = id;\n    \n    details.innerHTML = `\n      <div class=\"event-details__overlay\"></div>\n      <div class=\"event-details__content\">\n        <button class=\"event-details__close\" aria-label=\"Close details\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n        \n        <div class=\"event-details__header\">\n          ${category ? `<span class=\"event-details__category\">${category}</span>` : ''}\n          <h2 class=\"event-details__title\">${title}</h2>\n        </div>\n        \n        <div class=\"event-details__info\">\n          <div class=\"event-details__info-item\">\n            <span class=\"event-details__info-label\">Date:</span>\n            <time datetime=\"${start}\">${startDate}</time>\n          </div>\n          <div class=\"event-details__info-item\">\n            <span class=\"event-details__info-label\">Time:</span>\n            <time datetime=\"${start}\">${startTime}</time> - <time datetime=\"${end}\">${endTime}</time>\n            <span class=\"event-details__duration\">(${duration})</span>\n          </div>\n          ${location ? `\n            <div class=\"event-details__info-item\">\n              <span class=\"event-details__info-label\">Location:</span>\n              <span>${location}</span>\n            </div>\n          ` : ''}\n        </div>\n        \n        ${description ? `\n          <div class=\"event-details__description\">\n            <h3>Description</h3>\n            <p>${description}</p>\n          </div>\n        ` : ''}\n        \n        <div class=\"event-details__actions\">\n          <button class=\"btn btn--secondary\">Edit</button>\n          <button class=\"btn btn--primary\">Add to Calendar</button>\n        </div>\n      </div>\n    `;\n\n    // Add event listeners\n    details.querySelector('.event-details__overlay').addEventListener('click', () => this.close());\n    details.querySelector('.event-details__close').addEventListener('click', () => this.close());\n\n    return details;\n  }\n\n  /**\n   * Format a date string to a readable date\n   * @param {string} dateString - The date string to format\n   * @returns {string} The formatted date string\n   * @private\n   */\n  formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(undefined, { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n  }\n\n  /**\n   * Format a date string to a time string\n   * @param {string} dateString - The date string to format\n   * @returns {string} The formatted time string\n   * @private\n   */\n  formatTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }\n\n  /**\n   * Calculate the duration between two dates\n   * @param {string} start - The start date string\n   * @param {string} end - The end date string\n   * @returns {string} The formatted duration\n   * @private\n   */\n  calculateDuration(start, end) {\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    const diffMs = endDate - startDate;\n    \n    const hours = Math.floor(diffMs / (1000 * 60 * 60));\n    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (hours > 0) {\n      return `${hours} hour${hours > 1 ? 's' : ''} ${minutes} min${minutes !== 1 ? 's' : ''}`;\n    }\n    return `${minutes} minute${minutes !== 1 ? 's' : ''}`;\n  }\n\n  /**\n   * Close the details view\n   */\n  close() {\n    this.element.classList.add('event-details--closing');\n    setTimeout(() => {\n      this.element.remove();\n      if (this.onClose) this.onClose();\n    }, 300); // Match the CSS transition duration\n  }\n\n  /**\n   * Render the event details\n   * @param {HTMLElement} container - The container to render into\n   */\n  render(container) {\n    container.appendChild(this.element);\n    // Trigger the opening animation\n    requestAnimationFrame(() => {\n      this.element.classList.add('event-details--visible');\n    });\n  }\n}\n","/**\n * ViewToggle component for switching between different calendar views\n */\n\nexport class ViewToggle {\n  /**\n   * Create a new ViewToggle instance\n   * @param {Object} options - Configuration options\n   * @param {string} [options.initialView='upcoming'] - Initial active view\n   * @param {Function} [options.onChange] - Callback when view changes\n   * @param {string} [options.theme='light'] - Theme ('light' or 'dark')\n   */\n  constructor({ initialView = 'upcoming', onChange, theme = 'light' } = {}) {\n    this.views = ['upcoming', 'month', 'week', 'day'];\n    this.activeView = initialView;\n    this.onChange = onChange;\n    this.theme = theme;\n    this.element = this.createElement();\n  }\n\n  /**\n   * Create the view toggle element\n   * @returns {HTMLElement} The created element\n   * @private\n   */\n  createElement() {\n    const container = document.createElement('div');\n    container.className = `view-toggle theme-${this.theme}`;\n    container.setAttribute('role', 'tablist');\n    container.setAttribute('aria-label', 'Calendar view');\n\n    this.views.forEach(view => {\n      const button = document.createElement('button');\n      button.className = `view-toggle__button ${view === this.activeView ? 'is-active' : ''}`;\n      button.textContent = this.formatViewName(view);\n      button.dataset.view = view;\n      button.setAttribute('role', 'tab');\n      button.setAttribute('aria-selected', view === this.activeView ? 'true' : 'false');\n      button.setAttribute('aria-controls', 'calendar-view');\n      \n      button.addEventListener('click', () => this.setActiveView(view));\n      \n      container.appendChild(button);\n    });\n\n    return container;\n  }\n\n  /**\n   * Format view name for display\n   * @param {string} view - View name\n   * @returns {string} Formatted view name\n   * @private\n   */\n  formatViewName(view) {\n    return view.charAt(0).toUpperCase() + view.slice(1);\n  }\n\n  /**\n   * Set the active view\n   * @param {string} view - View to activate\n   */\n  setActiveView(view) {\n    if (!this.views.includes(view) || view === this.activeView) return;\n\n    // Update active state\n    this.element.querySelectorAll('.view-toggle__button').forEach(button => {\n      const isActive = button.dataset.view === view;\n      button.classList.toggle('is-active', isActive);\n      button.setAttribute('aria-selected', isActive ? 'true' : 'false');\n    });\n\n    this.activeView = view;\n\n    // Trigger change callback\n    if (this.onChange) {\n      this.onChange(view);\n    }\n  }\n\n\n  /**\n   * Update the theme\n   * @param {string} theme - New theme ('light' or 'dark')\n   */\n  setTheme(theme) {\n    this.theme = theme;\n    this.element.classList.toggle('theme-dark', theme === 'dark');\n    this.element.classList.toggle('theme-light', theme === 'light');\n  }\n\n  /**\n   * Render the view toggle in a container\n   * @param {HTMLElement} container - Container to render in\n   */\n  render(container) {\n    container.appendChild(this.element);\n  }\n}\n\nexport default ViewToggle;\n","/**\n * DatePicker component for calendar date selection\n */\n\nexport class DatePicker {\n  /**\n   * Create a new DatePicker instance\n   * @param {Object} options - Configuration options\n   * @param {Date} [options.initialDate=new Date()] - Initial selected date\n   * @param {Function} [options.onChange] - Callback when date changes\n   * @param {string} [options.theme='light'] - Theme ('light' or 'dark')\n   */\n  constructor({ initialDate = new Date(), onChange, theme = 'light' } = {}) {\n    this.selectedDate = new Date(initialDate);\n    this.onChange = onChange;\n    this.theme = theme;\n    this.months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    this.element = this.createElement();\n  }\n\n  /**\n   * Create the date picker element\n   * @returns {HTMLElement} The created element\n   * @private\n   */\n  createElement() {\n    const container = document.createElement('div');\n    container.className = `date-picker theme-${this.theme}`;\n    \n    // Navigation controls\n    const nav = document.createElement('div');\n    nav.className = 'date-picker__nav';\n    \n    const prevButton = document.createElement('button');\n    prevButton.className = 'date-picker__nav-button';\n    prevButton.innerHTML = '&larr;';\n    prevButton.setAttribute('aria-label', 'Previous month');\n    prevButton.addEventListener('click', () => this.navigate(-1));\n    \n    const nextButton = document.createElement('button');\n    nextButton.className = 'date-picker__nav-button';\n    nextButton.innerHTML = '&rarr;';\n    nextButton.setAttribute('aria-label', 'Next month');\n    nextButton.addEventListener('click', () => this.navigate(1));\n    \n    this.monthYearDisplay = document.createElement('span');\n    this.monthYearDisplay.className = 'date-picker__month-year';\n    this.updateMonthYearDisplay();\n    \n    nav.appendChild(prevButton);\n    nav.appendChild(this.monthYearDisplay);\n    nav.appendChild(nextButton);\n    \n    // Calendar grid\n    this.calendarGrid = document.createElement('div');\n    this.calendarGrid.className = 'date-picker__grid';\n    this.calendarGrid.setAttribute('role', 'grid');\n    this.calendarGrid.setAttribute('aria-label', 'Calendar');\n    \n    // Day headers\n    const dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n    const dayHeaders = document.createElement('div');\n    dayHeaders.className = 'date-picker__day-headers';\n    dayNames.forEach(day => {\n      const dayHeader = document.createElement('div');\n      dayHeader.className = 'date-picker__day-header';\n      dayHeader.textContent = day;\n      dayHeader.setAttribute('aria-label', day);\n      dayHeaders.appendChild(dayHeader);\n    });\n    \n    this.daysContainer = document.createElement('div');\n    this.daysContainer.className = 'date-picker__days';\n    this.renderDays();\n    \n    this.calendarGrid.appendChild(dayHeaders);\n    this.calendarGrid.appendChild(this.daysContainer);\n    \n    container.appendChild(nav);\n    container.appendChild(this.calendarGrid);\n    \n    return container;\n  }\n\n  /**\n   * Update the month and year display\n   * @private\n   */\n  updateMonthYearDisplay() {\n    const month = this.months[this.selectedDate.getMonth()];\n    const year = this.selectedDate.getFullYear();\n    this.monthYearDisplay.textContent = `${month} ${year}`;\n    this.monthYearDisplay.setAttribute('aria-live', 'polite');\n  }\n\n  /**\n   * Render the calendar days\n   * @private\n   */\n  renderDays() {\n    this.daysContainer.innerHTML = '';\n    \n    const year = this.selectedDate.getFullYear();\n    const month = this.selectedDate.getMonth();\n    \n    // Get first day of month and total days in month\n    const firstDay = new Date(year, month, 1).getDay();\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    \n    // Create day elements\n    for (let i = 0; i < 42; i++) { // 6 rows x 7 days\n      const day = i - firstDay + 1;\n      const dayElement = document.createElement('button');\n      dayElement.className = 'date-picker__day';\n      dayElement.setAttribute('role', 'gridcell');\n      \n      if (day > 0 && day <= daysInMonth) {\n        dayElement.textContent = day;\n        dayElement.dataset.day = day;\n        dayElement.setAttribute('aria-label', new Date(year, month, day).toLocaleDateString());\n        \n        // Highlight current day\n        const today = new Date();\n        if (day === today.getDate() && month === today.getMonth() && year === today.getFullYear()) {\n          dayElement.classList.add('is-today');\n        }\n        \n        // Highlight selected day\n        if (day === this.selectedDate.getDate()) {\n          dayElement.classList.add('is-selected');\n          dayElement.setAttribute('aria-selected', 'true');\n        } else {\n          dayElement.setAttribute('aria-selected', 'false');\n        }\n        \n        dayElement.addEventListener('click', () => this.selectDay(day));\n      } else {\n        dayElement.classList.add('is-empty');\n        dayElement.setAttribute('aria-hidden', 'true');\n      }\n      \n      this.daysContainer.appendChild(dayElement);\n    }\n  }\n\n  /**\n   * Navigate to previous or next month\n   * @param {number} direction - -1 for previous month, 1 for next month\n   * @private\n   */\n  navigate(direction) {\n    this.selectedDate.setMonth(this.selectedDate.getMonth() + direction);\n    this.updateMonthYearDisplay();\n    this.renderDays();\n  }\n\n  /**\n   * Select a day\n   * @param {number} day - The day to select\n   * @private\n   */\n  selectDay(day) {\n    const newDate = new Date(this.selectedDate);\n    newDate.setDate(day);\n    this.selectedDate = newDate;\n    this.renderDays();\n    \n    if (this.onChange) {\n      this.onChange(newDate);\n    }\n  }\n\n  /**\n   * Set the selected date\n   * @param {Date} date - The date to select\n   */\n  setDate(date) {\n    this.selectedDate = new Date(date);\n    this.updateMonthYearDisplay();\n    this.renderDays();\n  }\n\n  /**\n   * Set the theme\n   * @param {string} theme - The theme to set ('light' or 'dark')\n   */\n  setTheme(theme) {\n    this.theme = theme;\n    this.element.className = `date-picker theme-${theme}`;\n  }\n\n  /**\n   * Get the current selected date\n   * @returns {Date} The selected date\n   */\n  getDate() {\n    return new Date(this.selectedDate);\n  }\n}\n\nexport default DatePicker;\n","/**\n * Sonar Calendar - Main Calendar Component\n * \n * This is the main calendar component that handles the overall calendar state,\n * view management, and API interactions.\n */\n\nimport { EventCard } from '../EventCard/EventCard';\nimport { EventDetails } from '../EventDetails/EventDetails';\nimport { ViewToggle } from '../ViewToggle/ViewToggle';\nimport { DatePicker } from '../DatePicker/DatePicker';\n\nexport class SonarCalendar {\n  /**\n   * Create a new SonarCalendar instance\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} options.container - The container element for the calendar\n   * @param {string} [options.theme='light'] - The theme to use ('light' or 'dark')\n   * @param {string} [options.apiUrl] - Base URL for the events API\n   * @param {string} [options.dataSelector] - CSS selector for an element containing JSON data\n   */\n  constructor({ container, theme = 'light', apiUrl, dataSelector } = {}) {\n    if (!container) {\n      throw new Error('Container element is required');\n    }\n\n    this.container = container;\n    this.theme = theme;\n    this.apiUrl = apiUrl;\n    this.dataSelector = dataSelector;\n    this.currentDate = new Date();\n    this.events = [];\n    this.isLoading = false;\n    this.error = null;\n    this.activeEvent = null;\n    this.activeEventDetails = null;\n    this.currentView = 'upcoming'; // 'upcoming', 'month', 'week', 'day'\n\n    // Bind methods\n    this.handleEventClick = this.handleEventClick.bind(this);\n    this.closeEventDetails = this.closeEventDetails.bind(this);\n    this.handlePopState = this.handlePopState.bind(this);\n\n    // Initialize the calendar\n    this.initialize();\n    \n    // Set up handlers\n    this.handleViewChange = this.handleViewChange.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n  }\n\n\n  /**\n   * Initialize the calendar\n   * @private\n   */\n  initialize() {\n    // Apply theme\n    this.setTheme(this.theme);\n    \n    // Set up the container\n    this.container.innerHTML = `\n      <div class=\"sonar-calendar\">\n        <div class=\"calendar-header\">\n          <h2>Sonar Calendar</h2>\n          <div class=\"calendar-controls\">\n            <button class=\"btn btn-icon\" id=\"prev\">\n              <span class=\"sr-only\">Previous</span>\n              <span aria-hidden=\"true\">←</span>\n            </button>\n            <h3 id=\"current-month\">${this.formatDate(this.currentDate, 'MMMM yyyy')}</h3>\n            <button class=\"btn btn-icon\" id=\"next\">\n              <span class=\"sr-only\">Next</span>\n              <span aria-hidden=\"true\">→</span>\n            </button>\n          </div>\n        </div>\n        <div class=\"calendar-body\" id=\"calendar-body\">\n          <p>Loading calendar...</p>\n        </div>\n      </div>\n    `;\n    \n    // Add styles\n    this.addStyles();\n\n    // Set up event listeners\n    this.setupEventListeners();\n\n    // Add popstate handler for browser back/forward buttons\n    window.addEventListener('popstate', this.handlePopState);\n\n    // Load events\n    this.loadEvents();\n  }\n\n  /**\n   * Create the calendar header\n   * @private\n   */\n  createHeader() {\n    const header = document.createElement('div');\n    header.className = 'calendar-header';\n    \n    // Create date picker\n    this.datePicker = new DatePicker({\n      initialDate: this.currentDate,\n      onChange: this.handleDateChange,\n      theme: this.theme\n    });\n    \n    // Create view toggle\n    this.viewToggle = new ViewToggle({\n      initialView: this.currentView,\n      onChange: this.handleViewChange,\n      theme: this.theme\n    });\n    \n    // Create header content container\n    const headerContent = document.createElement('div');\n    headerContent.className = 'calendar-header__content';\n    \n    // Add date picker to header\n    const datePickerContainer = document.createElement('div');\n    datePickerContainer.className = 'calendar-date-picker';\n    this.datePicker.render(datePickerContainer);\n    headerContent.appendChild(datePickerContainer);\n    \n    // Add view toggle to header\n    const viewToggleContainer = document.createElement('div');\n    viewToggleContainer.className = 'calendar-view-toggle';\n    this.viewToggle.render(viewToggleContainer);\n    headerContent.appendChild(viewToggleContainer);\n    \n    header.appendChild(headerContent);\n    \n    return header.outerHTML;\n  }\n\n  /**\n   * Add calendar styles\n   * @private\n   */\n  addStyles() {\n    const styleId = 'sonar-calendar-styles';\n    if (document.getElementById(styleId)) return;\n    \n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `\n      .sonar-calendar {\n        max-width: 800px;\n        margin: 0 auto;\n        font-family: var(--font-sans);\n      }\n      \n      .calendar-header {\n        margin-bottom: 1.5rem;\n      }\n      \n      .calendar-header__content {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        gap: 1rem;\n      }\n      \n      .calendar-date-picker {\n        flex: 1;\n      }\n      \n      .calendar-view-toggle {\n        flex-shrink: 0;\n      }\n      \n      .calendar-header__content {\n        display: flex;\n        align-items: center;\n      }\n      \n      .calendar-title {\n        font-size: 1.5rem;\n        color: var(--color-text);\n        margin: 0 0 1rem 0;\n      }\n      \n      .calendar-view-toggle {\n        margin-left: 1rem;\n      }\n      \n      .calendar-events-container {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n        gap: 1rem;\n      }\n      \n      .no-events {\n        color: var(--color-text-muted);\n        font-style: italic;\n        grid-column: 1 / -1;\n        text-align: center;\n        padding: 2rem 0;\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n  \n  /**\n   * Apply the specified theme\n   * @param {string} theme - The theme to apply ('light' or 'dark')\n   */\n  setTheme(theme) {\n    this.theme = theme;\n    if (this.viewToggle) {\n      this.viewToggle.setTheme(theme);\n    }\n    this.updateCalendar();\n  }\n\n  /**\n   * Set up event listeners\n   * @private\n   */\n  setupEventListeners() {\n    // Navigation buttons\n    const prevBtn = this.container.querySelector('#prev');\n    const nextBtn = this.container.querySelector('#next');\n\n    if (prevBtn) {\n      prevBtn.addEventListener('click', () => this.navigate(-1));\n    }\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => this.navigate(1));\n    }\n  }\n\n  /**\n   * Handle event click\n   * @param {Object} event - The event data\n   * @private\n   */\n  handleEventClick(event) {\n    this.activeEvent = event;\n    this.showEventDetails(event);\n  }\n\n  /**\n   * Show event details\n   * @param {Object} event - The event data to display\n   * @private\n   */\n  showEventDetails(event) {\n    // Close any open event details\n    this.closeEventDetails();\n    \n    // Create and show new event details\n    this.activeEventDetails = new EventDetails(\n      event,\n      this.closeEventDetails.bind(this),\n      this.theme\n    );\n    \n    this.activeEventDetails.render(this.container);\n    \n    // Add to history state\n    window.history.pushState(\n      { eventId: event.id },\n      `Event: ${event.title}`,\n      `#event-${event.id}`\n    );\n  }\n\n  /**\n   * Close the event details view\n   * @private\n   */\n  closeEventDetails() {\n    if (this.activeEventDetails) {\n      this.activeEventDetails.close();\n      this.activeEventDetails = null;\n      this.activeEvent = null;\n      \n      // Update URL if we're currently viewing an event\n      if (window.location.hash.startsWith('#event-')) {\n        window.history.pushState(null, '', window.location.pathname);\n      }\n    }\n  }\n\n  /**\n   * Handle popstate events (back/forward navigation)\n   * @private\n   */\n  handlePopState() {\n    const eventId = window.location.hash.replace('#event-', '');\n    if (eventId) {\n      const event = this.events.find(e => e.id === eventId);\n      if (event) {\n        this.showEventDetails(event);\n      }\n    } else {\n      this.closeEventDetails();\n    }\n  }\n\n  /**\n   * Handle view change events from the view toggle\n   * @param {string} view - The new view to switch to\n   * @private\n   */\n  handleViewChange(view) {\n    if (['upcoming', 'month', 'week', 'day'].includes(view)) {\n      this.currentView = view;\n      this.updateCalendar();\n    }\n  }\n\n  /**\n   * Handle date change from date picker\n   * @param {Date} date - The newly selected date\n   * @private\n   */\n  handleDateChange(date) {\n    this.currentDate = new Date(date);\n    this.updateCalendar();\n  }\n\n  /**\n   * Navigate between months\n   * @param {number} direction - The direction to navigate (-1 for previous, 1 for next)\n   */\n  navigate(direction) {\n    this.currentDate.setMonth(this.currentDate.getMonth() + direction);\n    if (this.datePicker) {\n      this.datePicker.setDate(this.currentDate);\n    }\n    this.updateCalendar();\n  }\n\n  /**\n   * Parse events from a data source\n   * @param {string} source - The source of the data ('api' or 'element')\n   * @returns {Promise<Array>} - Parsed events array\n   * @private\n   */\n  async parseEvents(source) {\n    try {\n      if (source === 'api' && this.apiUrl) {\n        const response = await fetch(this.apiUrl);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n      } else if (source === 'element' && this.dataSelector) {\n        const element = document.querySelector(this.dataSelector);\n        if (!element) {\n          throw new Error(`No element found with selector: ${this.dataSelector}`);\n        }\n        \n        // Get the data from the element's value or text content\n        const data = element.value !== undefined ? element.value : element.textContent;\n        if (!data) {\n          throw new Error('No data found in the specified element');\n        }\n        \n        return JSON.parse(data);\n      }\n      return [];\n    } catch (error) {\n      console.error(`Error parsing events from ${source}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load events from the available data source\n   */\n  async loadEvents() {\n    this.isLoading = true;\n    this.error = null;\n    this.updateLoadingState();\n\n    try {\n      // Try to load from API first if available\n      if (this.apiUrl) {\n        this.events = await this.parseEvents('api');\n      } \n      // If no API URL or API failed, try loading from data element if specified\n      else if (this.dataSelector) {\n        this.events = await this.parseEvents('element');\n      } else {\n        this.events = [];\n        console.warn('No data source specified. Provide either apiUrl or dataSelector.');\n      }\n      \n      this.updateCalendar();\n    } catch (error) {\n      console.error('Error loading events:', error);\n      this.error = error.message;\n      this.showError(error.message);\n    } finally {\n      this.isLoading = false;\n      this.updateLoadingState();\n    }\n  }\n\n  /**\n   * Update the calendar display\n   * @private\n   */\n  updateCalendar() {\n    const calendarBody = this.container.querySelector('#calendar-body');\n    if (!calendarBody) return;\n\n    if (this.currentView === 'upcoming') {\n      this.renderUpcomingEvents(calendarBody);\n    } else if (this.currentView === 'month') {\n      this.renderMonthView(calendarBody);\n    } else if (this.currentView === 'week') {\n      this.renderWeekView(calendarBody);\n    } else if (this.currentView === 'day') {\n      this.renderDayView(calendarBody);\n    }\n  }\n\n  /**\n   * Render upcoming events\n   * @param {HTMLElement} container - The container to render events into\n   * @private\n   */\n  renderUpcomingEvents(container) {\n    const upcomingEvents = this.events.filter(event => {\n      const eventDate = new Date(event.start);\n      return eventDate >= this.currentDate;\n    });\n\n    this.renderEvents(container, upcomingEvents);\n  }\n\n  /**\n   * Render month view\n   * @param {HTMLElement} container - The container to render events into\n   * @private\n   */\n  renderMonthView(container) {\n    const monthEvents = this.events.filter(event => {\n      const eventDate = new Date(event.start);\n      return eventDate.getMonth() === this.currentDate.getMonth() && \n             eventDate.getFullYear() === this.currentDate.getFullYear();\n    });\n\n    this.renderEvents(container, monthEvents);\n  }\n\n  /**\n   * Render week view\n   * @param {HTMLElement} container - The container to render events into\n   * @private\n   */\n  renderWeekView(container) {\n    const weekEvents = this.events.filter(event => {\n      const eventDate = new Date(event.start);\n      const startDate = new Date(this.currentDate);\n      startDate.setDate(startDate.getDate() - startDate.getDay());\n      const endDate = new Date(startDate);\n      endDate.setDate(endDate.getDate() + 7);\n\n      return eventDate >= startDate && eventDate < endDate;\n    });\n\n    this.renderEvents(container, weekEvents);\n  }\n\n  /**\n   * Render day view\n   * @param {HTMLElement} container - The container to render events into\n   * @private\n   */\n  renderDayView(container) {\n    const dayEvents = this.events.filter(event => {\n      const eventDate = new Date(event.start);\n      return eventDate.toDateString() === this.currentDate.toDateString();\n    });\n\n    this.renderEvents(container, dayEvents);\n  }\n\n  /**\n   * Render events in the calendar\n   * @param {HTMLElement} container - The container to render events into\n   * @param {Array} [events] - Optional events to render (defaults to all events)\n   * @private\n   */\n  renderEvents(container, events = this.events) {\n    const eventsContainer = document.createElement('div');\n    eventsContainer.className = 'events-grid';\n    \n    events.forEach(event => {\n      const eventCard = new EventCard(event, this.theme);\n      eventCard.element.addEventListener('click', () => this.handleEventClick(event));\n      eventCard.element.setAttribute('tabindex', '0');\n      eventCard.element.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          this.handleEventClick(event);\n        }\n      });\n      eventsContainer.appendChild(eventCard.element);\n    });\n\n    container.innerHTML = ''; // Clear previous content\n    container.appendChild(eventsContainer);\n\n    // Show message if no events\n    if (events.length === 0) {\n      const noEvents = document.createElement('p');\n      noEvents.className = 'no-events';\n      noEvents.textContent = `No ${this.currentView} events found.`;\n      eventsContainer.appendChild(noEvents);\n    }\n    \n    // Check if we need to show an event from the URL hash\n    if (window.location.hash.startsWith('#event-') && !this.activeEvent) {\n      const eventId = window.location.hash.replace('#event-', '');\n      const event = this.events.find(e => e.id.toString() === eventId);\n      if (event) {\n        // Use setTimeout to ensure the DOM is updated first\n        setTimeout(() => this.showEventDetails(event), 0);\n      }\n    }\n  }\n\n  /**\n   * Update the calendar display\n   * @private\n   */\n  updateCalendar() {\n    const calendarBody = this.container.querySelector('#calendar-body') || this.container;\n    \n    if (this.currentView === 'upcoming') {\n      this.renderUpcomingEvents(calendarBody);\n    } else if (this.currentView === 'month') {\n      this.renderMonthView(calendarBody);\n    } else if (this.currentView === 'week') {\n      this.renderWeekView(calendarBody);\n    } else if (this.currentView === 'day') {\n      this.renderDayView(calendarBody);\n    }\n    \n    // Update the title with the current view context\n    const titleElement = this.container.querySelector('.calendar-title');\n    if (titleElement) {\n      if (this.currentView === 'upcoming') {\n        titleElement.textContent = 'Upcoming Events';\n      } else {\n        titleElement.textContent = this.formatDate(this.currentDate, 'MMMM yyyy');\n      }\n    }\n  }\n\n  /**\n   * Update loading state\n   * @private\n   */\n  updateLoadingState() {\n    const calendarBody = this.container.querySelector('#calendar-body');\n    if (!calendarBody) return;\n\n    if (this.isLoading) {\n      calendarBody.innerHTML = '<div class=\"loading\">Loading events...</div>';\n    } else if (this.error) {\n      calendarBody.innerHTML = `\n        <div class=\"error\">\n          <p>Error loading events: ${this.error}</p>\n          <button class=\"btn btn-primary\" id=\"retry-load\">Retry</button>\n        </div>\n      `;\n      \n      const retryBtn = calendarBody.querySelector('#retry-load');\n      if (retryBtn) {\n        retryBtn.addEventListener('click', () => this.loadEvents());\n      }\n    }\n  }\n\n  /**\n   * Show error message\n   * @param {string} message - The error message to display\n   * @private\n   */\n  showError(message) {\n    console.error('Calendar Error:', message);\n    // Error display is handled in updateLoadingState\n  }\n\n  /**\n   * Format a date string\n   * @param {Date} date - The date to format\n   * @param {string} format - The format string\n   * @returns {string} The formatted date string\n   * @private\n   */\n  formatDate(date, format) {\n    // Simple date formatting - can be enhanced with a library like date-fns\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n    };\n    \n    return new Intl.DateTimeFormat('en-US', options).format(date);\n  }\n}\n","/**\n * Sonar Calendar - Main Entry Point\n * \n * This is the main entry point for the Sonar Calendar library.\n * It initializes the calendar and sets up the necessary event listeners.\n */\n\n// Import base styles\nimport './styles/base.css';\nimport './styles/themes/light.css'; // Default theme\nimport './styles/themes/dark.css';\n\n// Import component styles\nimport './components/EventCard/EventCard.css';\nimport './components/EventDetails/EventDetails.css';\nimport './components/ViewToggle/ViewToggle.css';\nimport './components/DatePicker/DatePicker.css';\nimport { SonarCalendar } from './components/Calendar/Calendar';\n\n/**\n * Initialize the Sonar Calendar\n * @param {Object} options - Configuration options for the calendar\n * @param {string} options.selector - CSS selector for the container element\n * @param {string} [options.theme='light'] - Theme to use ('light' or 'dark')\n * @param {string} [options.apiUrl] - Base URL for the events API\n * @param {string} [options.dataSelector] - CSS selector for an element containing JSON data\n * @returns {SonarCalendar} - The initialized calendar instance\n */\nfunction initSonarCalendar(options = {}) {\n  const {\n    selector = '#calendar',\n    theme = 'light',\n    apiUrl,\n    dataSelector\n  } = options;\n\n  // Find the container element\n  const container = document.querySelector(selector);\n  if (!container) {\n    console.error(`No element found with selector: ${selector}`);\n    return null;\n  }\n\n  // Initialize the calendar\n  const calendar = new SonarCalendar({\n    container,\n    theme,\n    apiUrl,\n    dataSelector\n  });\n\n  return calendar;\n}\n\n// Export the initialization function and main class\nwindow.SonarCalendar = {\n  init: initSonarCalendar,\n  Calendar: SonarCalendar\n};\n\nexport { SonarCalendar, initSonarCalendar };\n"],"names":["EventCard","constructor","event","theme","onClick","this","element","createElement","id","title","start","end","description","category","startTime","formatTime","endTime","categoryClass","toLowerCase","replace","card","document","className","dataset","eventId","setAttribute","tabIndex","innerHTML","handleClick","e","preventDefault","stopPropagation","addEventListener","key","dateString","Date","toLocaleTimeString","hour","minute","render","container","appendChild","update","newEvent","newElement","parentNode","replaceChild","EventDetails","onClose","location","startDate","formatDate","duration","calculateDuration","details","querySelector","close","toLocaleDateString","undefined","weekday","year","month","day","diffMs","hours","Math","floor","minutes","classList","add","setTimeout","remove","requestAnimationFrame","ViewToggle","initialView","onChange","views","activeView","forEach","view","button","textContent","formatViewName","setActiveView","charAt","toUpperCase","slice","includes","querySelectorAll","isActive","toggle","setTheme","DatePicker","initialDate","selectedDate","months","nav","prevButton","navigate","nextButton","monthYearDisplay","updateMonthYearDisplay","calendarGrid","dayHeaders","dayHeader","daysContainer","renderDays","getMonth","getFullYear","firstDay","getDay","daysInMonth","getDate","i","dayElement","today","selectDay","direction","setMonth","newDate","setDate","date","SonarCalendar","apiUrl","dataSelector","Error","currentDate","events","isLoading","error","activeEvent","activeEventDetails","currentView","handleEventClick","bind","closeEventDetails","handlePopState","initialize","handleViewChange","handleDateChange","addStyles","setupEventListeners","window","loadEvents","createHeader","header","datePicker","viewToggle","headerContent","datePickerContainer","viewToggleContainer","outerHTML","styleId","getElementById","style","head","updateCalendar","prevBtn","nextBtn","showEventDetails","history","pushState","hash","startsWith","pathname","find","parseEvents","source","response","fetch","ok","status","json","data","value","JSON","parse","console","updateLoadingState","warn","message","showError","calendarBody","renderUpcomingEvents","renderMonthView","renderWeekView","renderDayView","upcomingEvents","filter","renderEvents","monthEvents","eventDate","weekEvents","endDate","dayEvents","toDateString","eventsContainer","eventCard","length","noEvents","toString","titleElement","retryBtn","format","Intl","DateTimeFormat","initSonarCalendar","options","selector","init","Calendar"],"mappings":"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"}