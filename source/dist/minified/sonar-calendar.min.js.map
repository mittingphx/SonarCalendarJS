{"version":3,"file":"sonar-calendar.min.js","sources":["../../src/components/Calendar/Calendar.js","../../src/index.js"],"sourcesContent":["/**\n * Sonar Calendar - Main Calendar Component\n * \n * This is the main calendar component that handles the overall calendar state,\n * view management, and API interactions.\n */\n\nexport class SonarCalendar {\n  /**\n   * Create a new SonarCalendar instance\n   * @param {Object} options - Configuration options\n   * @param {HTMLElement} options.container - The container element for the calendar\n   * @param {string} [options.theme='light'] - The theme to use ('light' or 'dark')\n   * @param {string} [options.apiUrl] - Base URL for the events API\n   * @param {string} [options.dataSelector] - CSS selector for an element containing JSON data\n   */\n  constructor({ container, theme = 'light', apiUrl, dataSelector } = {}) {\n    if (!container) {\n      throw new Error('Container element is required');\n    }\n\n    this.container = container;\n    this.theme = theme;\n    this.apiUrl = apiUrl;\n    this.dataSelector = dataSelector;\n    this.currentDate = new Date();\n    this.events = [];\n    this.isLoading = false;\n    this.error = null;\n\n    // Initialize the calendar\n    this.initialize();\n  }\n\n\n  /**\n   * Initialize the calendar\n   * @private\n   */\n  initialize() {\n    // Apply theme\n    this.applyTheme(this.theme);\n    \n    // Set up the container\n    this.container.innerHTML = `\n      <div class=\"sonar-calendar\">\n        <div class=\"calendar-header\">\n          <h2>Sonar Calendar</h2>\n          <div class=\"calendar-controls\">\n            <button class=\"btn btn-icon\" id=\"prev\">\n              <span class=\"sr-only\">Previous</span>\n              <span aria-hidden=\"true\">←</span>\n            </button>\n            <h3 id=\"current-month\">${this.formatDate(this.currentDate, 'MMMM yyyy')}</h3>\n            <button class=\"btn btn-icon\" id=\"next\">\n              <span class=\"sr-only\">Next</span>\n              <span aria-hidden=\"true\">→</span>\n            </button>\n          </div>\n        </div>\n        <div class=\"calendar-body\" id=\"calendar-body\">\n          <p>Loading calendar...</p>\n        </div>\n      </div>\n    `;\n\n    // Set up event listeners\n    this.setupEventListeners();\n    \n    // Load initial data\n    this.loadEvents();\n  }\n\n\n  /**\n   * Apply the specified theme\n   * @param {string} theme - The theme to apply ('light' or 'dark')\n   */\n  applyTheme(theme) {\n    this.theme = theme;\n    document.documentElement.setAttribute('data-theme', theme);\n  }\n\n  /**\n   * Set up event listeners\n   * @private\n   */\n  setupEventListeners() {\n    // Navigation buttons\n    const prevBtn = this.container.querySelector('#prev');\n    const nextBtn = this.container.querySelector('#next');\n\n    if (prevBtn) {\n      prevBtn.addEventListener('click', () => this.navigate(-1));\n    }\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => this.navigate(1));\n    }\n  }\n\n  /**\n   * Navigate between months\n   * @param {number} direction - The direction to navigate (-1 for previous, 1 for next)\n   */\n  navigate(direction) {\n    const newDate = new Date(this.currentDate);\n    newDate.setMonth(newDate.getMonth() + direction);\n    this.currentDate = newDate;\n    this.updateCalendar();\n  }\n\n  /**\n   * Parse events from a data source\n   * @param {string} source - The source of the data ('api' or 'element')\n   * @returns {Promise<Array>} - Parsed events array\n   * @private\n   */\n  async parseEvents(source) {\n    try {\n      if (source === 'api' && this.apiUrl) {\n        const response = await fetch(this.apiUrl);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n      } else if (source === 'element' && this.dataSelector) {\n        const element = document.querySelector(this.dataSelector);\n        if (!element) {\n          throw new Error(`No element found with selector: ${this.dataSelector}`);\n        }\n        \n        // Get the data from the element's value or text content\n        const data = element.value !== undefined ? element.value : element.textContent;\n        if (!data) {\n          throw new Error('No data found in the specified element');\n        }\n        \n        return JSON.parse(data);\n      }\n      return [];\n    } catch (error) {\n      console.error(`Error parsing events from ${source}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load events from the available data source\n   */\n  async loadEvents() {\n    this.isLoading = true;\n    this.error = null;\n    this.updateLoadingState();\n\n    try {\n      // Try to load from API first if available\n      if (this.apiUrl) {\n        this.events = await this.parseEvents('api');\n      } \n      // If no API URL or API failed, try loading from data element if specified\n      else if (this.dataSelector) {\n        this.events = await this.parseEvents('element');\n      } else {\n        this.events = [];\n        console.warn('No data source specified. Provide either apiUrl or dataSelector.');\n      }\n      \n      this.updateCalendar();\n    } catch (error) {\n      console.error('Error loading events:', error);\n      this.error = error.message;\n      this.showError(error.message);\n    } finally {\n      this.isLoading = false;\n      this.updateLoadingState();\n    }\n  }\n\n  /**\n   * Update the calendar display\n   * @private\n   */\n  updateCalendar() {\n    const monthElement = this.container.querySelector('#current-month');\n    if (monthElement) {\n      monthElement.textContent = this.formatDate(this.currentDate, 'MMMM yyyy');\n    }\n\n    // TODO: Implement calendar grid rendering\n    const calendarBody = this.container.querySelector('#calendar-body');\n    if (calendarBody) {\n      calendarBody.innerHTML = `\n        <div class=\"calendar-month\">\n          <p>Calendar view for ${this.formatDate(this.currentDate, 'MMMM yyyy')} will be implemented here.</p>\n          <p>Found ${this.events.length} events.</p>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Update loading state\n   * @private\n   */\n  updateLoadingState() {\n    const calendarBody = this.container.querySelector('#calendar-body');\n    if (!calendarBody) return;\n\n    if (this.isLoading) {\n      calendarBody.innerHTML = '<div class=\"loading\">Loading events...</div>';\n    } else if (this.error) {\n      calendarBody.innerHTML = `\n        <div class=\"error\">\n          <p>Error loading events: ${this.error}</p>\n          <button class=\"btn btn-primary\" id=\"retry-load\">Retry</button>\n        </div>\n      `;\n      \n      const retryBtn = calendarBody.querySelector('#retry-load');\n      if (retryBtn) {\n        retryBtn.addEventListener('click', () => this.loadEvents());\n      }\n    }\n  }\n\n  /**\n   * Show error message\n   * @param {string} message - The error message to display\n   * @private\n   */\n  showError(message) {\n    console.error('Calendar Error:', message);\n    // Error display is handled in updateLoadingState\n  }\n\n  /**\n   * Format a date string\n   * @param {Date} date - The date to format\n   * @param {string} format - The format string\n   * @returns {string} The formatted date string\n   * @private\n   */\n  formatDate(date, format) {\n    // Simple date formatting - can be enhanced with a library like date-fns\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n    };\n    \n    return new Intl.DateTimeFormat('en-US', options).format(date);\n  }\n}\n","/**\n * Sonar Calendar - Main Entry Point\n * \n * This is the main entry point for the Sonar Calendar library.\n * It initializes the calendar and sets up the necessary event listeners.\n */\n\nimport './styles/base.css';\nimport './styles/themes/light.css'; // Default theme\nimport { SonarCalendar } from './components/Calendar/Calendar';\n\n/**\n * Initialize the Sonar Calendar\n * @param {Object} options - Configuration options for the calendar\n * @param {string} options.selector - CSS selector for the container element\n * @param {string} [options.theme='light'] - Theme to use ('light' or 'dark')\n * @param {string} [options.apiUrl] - Base URL for the events API\n * @param {string} [options.dataSelector] - CSS selector for an element containing JSON data\n * @returns {SonarCalendar} - The initialized calendar instance\n */\nfunction initSonarCalendar(options = {}) {\n  const {\n    selector = '#calendar',\n    theme = 'light',\n    apiUrl,\n    dataSelector\n  } = options;\n\n  // Find the container element\n  const container = document.querySelector(selector);\n  if (!container) {\n    console.error(`No element found with selector: ${selector}`);\n    return null;\n  }\n\n  // Initialize the calendar\n  const calendar = new SonarCalendar({\n    container,\n    theme,\n    apiUrl,\n    dataSelector\n  });\n\n  return calendar;\n}\n\n// Export the initialization function and main class\nwindow.SonarCalendar = {\n  init: initSonarCalendar,\n  Calendar: SonarCalendar\n};\n\nexport { SonarCalendar, initSonarCalendar };\n"],"names":["SonarCalendar","constructor","container","theme","apiUrl","dataSelector","Error","this","currentDate","Date","events","isLoading","error","initialize","applyTheme","innerHTML","formatDate","setupEventListeners","loadEvents","document","documentElement","setAttribute","prevBtn","querySelector","nextBtn","addEventListener","navigate","direction","newDate","setMonth","getMonth","updateCalendar","parseEvents","source","response","fetch","ok","status","json","element","data","undefined","value","textContent","JSON","parse","console","updateLoadingState","warn","message","showError","monthElement","calendarBody","length","retryBtn","date","format","Intl","DateTimeFormat","year","month","day","weekday","initSonarCalendar","options","selector","window","init","Calendar"],"mappings":"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"}