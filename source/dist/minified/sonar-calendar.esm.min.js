class e{constructor({container:e,theme:t="light",apiUrl:n,dataSelector:r}={}){if(!e)throw new Error("Container element is required");this.container=e,this.theme=t,this.apiUrl=n,this.dataSelector=r,this.currentDate=new Date,this.events=[],this.isLoading=!1,this.error=null,this.initialize()}initialize(){this.applyTheme(this.theme),this.container.innerHTML=`\n      <div class="sonar-calendar">\n        <div class="calendar-header">\n          <h2>Sonar Calendar</h2>\n          <div class="calendar-controls">\n            <button class="btn btn-icon" id="prev">\n              <span class="sr-only">Previous</span>\n              <span aria-hidden="true">←</span>\n            </button>\n            <h3 id="current-month">${this.formatDate(this.currentDate,"MMMM yyyy")}</h3>\n            <button class="btn btn-icon" id="next">\n              <span class="sr-only">Next</span>\n              <span aria-hidden="true">→</span>\n            </button>\n          </div>\n        </div>\n        <div class="calendar-body" id="calendar-body">\n          <p>Loading calendar...</p>\n        </div>\n      </div>\n    `,this.setupEventListeners(),this.loadEvents()}applyTheme(e){this.theme=e,document.documentElement.setAttribute("data-theme",e)}setupEventListeners(){const e=this.container.querySelector("#prev"),t=this.container.querySelector("#next");e&&e.addEventListener("click",(()=>this.navigate(-1))),t&&t.addEventListener("click",(()=>this.navigate(1)))}navigate(e){const t=new Date(this.currentDate);t.setMonth(t.getMonth()+e),this.currentDate=t,this.updateCalendar()}async parseEvents(e){try{if("api"===e&&this.apiUrl){const e=await fetch(this.apiUrl);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}if("element"===e&&this.dataSelector){const e=document.querySelector(this.dataSelector);if(!e)throw new Error(`No element found with selector: ${this.dataSelector}`);const t=void 0!==e.value?e.value:e.textContent;if(!t)throw new Error("No data found in the specified element");return JSON.parse(t)}return[]}catch(t){throw console.error(`Error parsing events from ${e}:`,t),t}}async loadEvents(){this.isLoading=!0,this.error=null,this.updateLoadingState();try{this.apiUrl?this.events=await this.parseEvents("api"):this.dataSelector?this.events=await this.parseEvents("element"):(this.events=[],console.warn("No data source specified. Provide either apiUrl or dataSelector.")),this.updateCalendar()}catch(e){console.error("Error loading events:",e),this.error=e.message,this.showError(e.message)}finally{this.isLoading=!1,this.updateLoadingState()}}updateCalendar(){const e=this.container.querySelector("#current-month");e&&(e.textContent=this.formatDate(this.currentDate,"MMMM yyyy"));const t=this.container.querySelector("#calendar-body");t&&(t.innerHTML=`\n        <div class="calendar-month">\n          <p>Calendar view for ${this.formatDate(this.currentDate,"MMMM yyyy")} will be implemented here.</p>\n          <p>Found ${this.events.length} events.</p>\n        </div>\n      `)}updateLoadingState(){const e=this.container.querySelector("#calendar-body");if(e)if(this.isLoading)e.innerHTML='<div class="loading">Loading events...</div>';else if(this.error){e.innerHTML=`\n        <div class="error">\n          <p>Error loading events: ${this.error}</p>\n          <button class="btn btn-primary" id="retry-load">Retry</button>\n        </div>\n      `;const t=e.querySelector("#retry-load");t&&t.addEventListener("click",(()=>this.loadEvents()))}}showError(e){console.error("Calendar Error:",e)}formatDate(e,t){return new Intl.DateTimeFormat("en-US",{year:"numeric",month:"long",day:"numeric",weekday:"long"}).format(e)}}function t(t={}){const{selector:n="#calendar",theme:r="light",apiUrl:a,dataSelector:i}=t,s=document.querySelector(n);if(!s)return console.error(`No element found with selector: ${n}`),null;return new e({container:s,theme:r,apiUrl:a,dataSelector:i})}window.SonarCalendar={init:t,Calendar:e};export{e as SonarCalendar,t as initSonarCalendar};
//# sourceMappingURL=sonar-calendar.esm.min.js.map
